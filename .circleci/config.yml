version: 2.1

commands:
    install_awscli:
      description: Install aws CLI v2
      steps:
        - run: 
            name: Install AWS CLI v2 
            command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install

    install_ansible:
      description: Install ansible 
      steps:
        - run:
            name: Install ansible 
            command: |
              sudo apt update
              sudo apt install software-properties-common
              sudo add-apt-repository --yes --update ppa:ansible/ansible
              sudo apt install ansible -y
              
    destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
        workflow_ID:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}  
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_ID >>
              aws s3 rm s3://udapeople-<<parameters.workflow_ID>> --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_ID >> 

    revert-migrations:
      description: Revert the last migration if successfully run in the current workflow.
      parameters:
          workflow_ID:
            type: string
            default: ${CIRCLE_WORKFLOW_ID:0:7}       
      steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
              SUCCESS = $(curl --insecure https://kvdb.io/kRyK6ach7YGoSQVdawB2J/migration_<< parameters.workflow_ID >>)
              if(( $SUCCESS==1 )); 
              then
                cd ~/project/backend
                npm install
                npm run migration:revert
              fi

    install_nodejs:
      description: Install Node.js 13.8.0
      steps:
        - run:
            name: Install Node.js 13.8.0
            command: |
              # Install Node.js LTS version as our base Node.js version
              curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
              sudo apt install -y nodejs

              # Use n version manager to use Node.js v13.8.0
              sudo npm install --global n
              sudo n 13.8.0
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-keys]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-keys

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-keys]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-keys

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-keys]
      - run:
          name: frontend unit tests
          command: |
            cd frontend
            npm install
            npm test
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-keys]
      - run:
          name: Backend unit tests
          command: |
             cd backend
             npm install
             npm test
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-keys]
      - run:
          name: frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-keys]
      - run:
          name: Backend scan
          command: |
             cd backend
             npm install
             npm audit fix --force --audit-level=critical
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment      

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["ca:28:d5:3f:58:96:1e:81:22:1d:b5:5b:1f:1d:de:33"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [backend-build-keys]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm init
            npm run build
            npm run migrations > migrationOutput.txt
            cat migrationOutput.txt
      - run:
          name: Send migration results to KVDB
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrationOutput.txt
            then
              curl https://kvdb.io/kRyK6ach7YGoSQVdawB2J/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - destroy-environment
      - revert-migrations      

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-build-keys]
      - run:
          name: Install dependencies
          command: |
            cd frontend 
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment      
                    
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [configure-infrastructure]
      - deploy-backend:
          requires: [configure-infrastructure]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]